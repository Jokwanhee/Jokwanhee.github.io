// Copyright 2025 dev.kwan
package com.kwanhee.gymapp.ui.components

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.kwanhee.gymapp.data.FriendState
import com.kwanhee.gymapp.data.GymStatus
import com.kwanhee.gymapp.ui.theme.GymColors
import com.kwanhee.gymapp.ui.theme.GymTheme
import kotlinx.datetime.Clock
import kotlinx.datetime.Instant
import kotlinx.datetime.Month
import kotlinx.datetime.TimeZone
import kotlinx.datetime.toLocalDateTime
import org.jetbrains.compose.ui.tooling.preview.Preview

@Composable
fun FriendStatusCard(
    friendState: FriendState?,
    modifier: Modifier = Modifier
) {
    if (friendState != null) {
        GoStatusCard(
            friendState = friendState,
            modifier = modifier,

            )
    }
//    if (friendState?.status == GymStatus.GO) {
//    } else {
//        DefaultStatusCard(friendState = friendState, modifier = modifier)
//    }
}

@Composable
private fun GoStatusCard(
    friendState: FriendState,
    modifier: Modifier = Modifier
) {
    // Unix ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑÎ•º Ïò§Ï†Ñ/Ïò§ÌõÑ HH:mm:ss ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
    val lastUpdatedDateTime = Instant.fromEpochSeconds(friendState.lastUpdated)
        .toLocalDateTime(TimeZone.currentSystemDefault())
    val month = when (lastUpdatedDateTime.month) {
        Month.JANUARY -> 1
        Month.FEBRUARY -> 2
        Month.MARCH -> 3
        Month.APRIL -> 4
        Month.MAY -> 5
        Month.JUNE -> 6
        Month.JULY -> 7
        Month.AUGUST -> 8
        Month.SEPTEMBER -> 9
        Month.OCTOBER -> 10
        Month.NOVEMBER -> 11
        Month.DECEMBER -> 12
        else -> 0
    }
    val date = lastUpdatedDateTime.dayOfMonth


    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(
                elevation = 0.dp, // Í∑∏Î¶ºÏûê Ï†úÍ±∞ ÎòêÎäî ÏïΩÌïòÍ≤å
                shape = RoundedCornerShape(24.dp)
            ),
        shape = RoundedCornerShape(24.dp), // Îçî Îë•Í∑º Î™®ÏÑúÎ¶¨
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFFFBEF) // Ïó∞Ìïú Î≤†Ïù¥ÏßÄÏÉâ Î∞∞Í≤Ω (Ïù¥ÎØ∏ÏßÄÏôÄ Ïú†ÏÇ¨ÌïòÍ≤å)
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(horizontal = 20.dp, vertical = 24.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            // 1. ÏÉÅÎã®: ÏπúÍµ¨ ÌòÑÌô© Î≥¥Í≥†ÏÑú + Ïó≠ÎèÑ Ïù¥Î™®ÏßÄ
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = "${month}Ïõî ${date}Ïùº ÏπúÍµ¨Ïùò Ìé∏ÏßÄ",
                    style = GymTheme.typography.titleLargeB.copy(fontSize = 22.sp),
                    color = Color.Black
                )
                Spacer(Modifier.width(8.dp))
                Text("üèãÔ∏è", fontSize = 36.sp) // ÏûÑÏãú ÌÖçÏä§Ìä∏ Ïù¥Î™®ÏßÄ
                Spacer(Modifier.width(4.dp))
                Text("üìä", fontSize = 20.sp) // ÏûÑÏãú ÌÖçÏä§Ìä∏ Ïù¥Î™®ÏßÄ
            }

            Spacer(modifier = Modifier.height(24.dp))

            // 2. ÏÉÅÌÉú Î©îÏãúÏßÄ Ïπ¥Îìú (ÎÖπÏÉâ Î∞∞Í≤Ω)
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .background(
                        color = when (friendState.status) {
                            GymStatus.GO ->  GymColors.GoGreen
                            GymStatus.NO -> GymColors.NoRed
                            GymStatus.THINKING -> GymColors.ThinkingGray
                        },
                        shape = RoundedCornerShape(16.dp)
                    )
                    .padding(vertical = 16.dp, horizontal = 20.dp)
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Text(
                        text = when (friendState.status) {
                            GymStatus.GO -> "üéâ Ïò§Îäò Í∞ÄÏïºÏßÄ~!"
                            GymStatus.NO -> "Ïò§ÎäòÏùÄ ÏïàÍ∞ê!"
                            GymStatus.THINKING -> "Í≥†ÎØºÏ§ëÏù¥Í∏¥Ìï¥~"
                        },
                        style = GymTheme.typography.titleMediumB.copy(fontSize = 18.sp),
                        color = Color.White,
                        textAlign = TextAlign.Center
                    )
                    Spacer(modifier = Modifier.height(4.dp))

                    Spacer(modifier = Modifier.height(12.dp))

                    // ÏπúÍµ¨Ïùò ÎßàÏùå ÏÑπÏÖò
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                color = Color.Black.copy(alpha = 0.1f),
                                shape = RoundedCornerShape(12.dp)
                            )
                            .padding(vertical = 10.dp, horizontal = 16.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = when (friendState.status) {
                                GymStatus.GO -> "Ïò§ÎäòÎèÑ Ìó¨Ïä§Ìï¥ÏïºÏßÄ~ Ïò§ÏºÄÏù¥~ üí™"
                                GymStatus.NO -> "ÏùºÏù¥ ÏûàÏñ¥ÏÑú Î™ªÍ∞Ä~ ÎØ∏ÏïàÌïòÍ∏¥Ìï¥~"
                                GymStatus.THINKING -> "ÏßÑÏßú Í∞àÎûò? ÎßêÎûò?"
                            },
                            style = GymTheme.typography.bodyMediumR,
                            color = Color.White,
                            textAlign = TextAlign.Center,
                            lineHeight = 20.sp,
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(20.dp))

            // 3. ÌïòÎã® Î¶¨Ïï°ÏÖò Ïù¥Î™®ÏßÄ
            Row(
                horizontalArrangement = Arrangement.spacedBy(12.dp, alignment = Alignment.CenterHorizontally),
                verticalAlignment = Alignment.CenterVertically,
            ) {
                when(friendState.status) {
                    GymStatus.GO -> Text("üí™ üî• ‚ö°", fontSize = 28.sp)
                    GymStatus.NO -> Text("üò¥ üõãÔ∏è üí§", fontSize = 28.sp)
                    GymStatus.THINKING -> Text( "ü§î üí≠ ", fontSize = 28.sp)
                }

            }

            Spacer(modifier = Modifier.height(20.dp))

        }
    }
}


@Composable
private fun DefaultStatusCard(
    friendState: FriendState?,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(16.dp)
            ),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color.White
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            if (friendState != null) {
                // ÏπúÍµ¨ Ïù¥Î¶Ñ
                Text(
                    text = "üôã‚Äç‚ôÇÔ∏è ${friendState.name} ÏπúÍµ¨:",
                    style = GymTheme.typography.titleMediumB,
                    color = Color.Black,
                    modifier = Modifier.padding(bottom = 12.dp)
                )

                // ÏπúÍµ¨ ÏÉÅÌÉú Î∞∞ÏßÄ
                Row(
                    modifier = Modifier
                        .clip(RoundedCornerShape(999.dp)) // clipÏùÑ Î®ºÏ†Ä Ï†ÅÏö©
                        .background(
                            color = when (friendState.status) {
                                GymStatus.GO -> GymColors.GoGreen // GO ÏÉÅÌÉúÎäî Ïù¥Ï†ú GoStatusCardÏóêÏÑú Ï≤òÎ¶¨ÎêòÏßÄÎßå, ÎßåÏïΩÏùÑ ÏúÑÌï¥ ÎÇ®Í≤®Îë†
                                GymStatus.NO -> GymColors.NoRed
                                GymStatus.THINKING -> GymColors.ThinkingGray
                            }
                        )
                        .padding(horizontal = 16.dp, vertical = 8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = friendState.status.emoji,
                        style = GymTheme.typography.emojiTitleMedium,
                        modifier = Modifier.padding(end = 8.dp)
                    )
                    Text(
                        text = friendState.status.text,
                        style = GymTheme.typography.titleMediumB,
                        color = Color.White
                    )
                }

                // ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ (ÏÑ†ÌÉùÏÇ¨Ìï≠) - GO ÏÉÅÌÉúÍ∞Ä ÏïÑÎãê Îïå
                Text(
                    text = buildAnnotatedString {
                        withStyle(
                            style = GymTheme.typography.emojiLabelSmall.toSpanStyle()
                                .copy(color = Color.Gray)
                        ) {
                            append("üëâ")
                        }
                        withStyle(
                            style = GymTheme.typography.labelSmallM.toSpanStyle()
                                .copy(color = Color.Gray)
                        ) {
                            append(" \"${friendState.status.text}\"")
                        }
                    },
                    modifier = Modifier.padding(top = 8.dp),
                    textAlign = TextAlign.Center
                )
            } else {
                // ÏπúÍµ¨Í∞Ä ÏïÑÏßÅ ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
                Text(
                    text = "ü§î ÏπúÍµ¨Í∞Ä ÏïÑÏßÅ ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏñ¥Ïöî",
                    style = GymTheme.typography.titleMediumR,
                    color = Color.Gray,
                    textAlign = TextAlign.Center
                )
                Text(
                    text = "ÎßÅÌÅ¨Î•º Í≥µÏú†Ìï¥ÏÑú ÏπúÍµ¨ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!",
                    style = GymTheme.typography.labelSmallM,
                    color = Color.Gray,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.padding(top = 4.dp)
                )
            }
        }
    }
}

@Preview
@Composable
fun FriendStatusCardGoPreview() {
    val friendStateGo = FriendState(
        friendId = "friendGo",
        name = "Ìó¨Ïä§Ïôï",
        status = GymStatus.GO,
        lastUpdated = Clock.System.now().epochSeconds - 3600 // 1ÏãúÍ∞Ñ Ï†Ñ
    )
    GymTheme {
        Column(Modifier.padding(16.dp).background(Color(0xFFE0E0E0))) { // ÌîÑÎ¶¨Î∑∞ Î∞∞Í≤ΩÏÉâ
            FriendStatusCard(friendState = friendStateGo)
        }
    }
}

@Preview
@Composable
fun FriendStatusCardNoPreview() {
    val friendStateNo = FriendState(
        friendId = "friendNo",
        name = "ÏßëÎèåÏù¥",
        status = GymStatus.NO,
        lastUpdated = Clock.System.now().epochSeconds
    )
    GymTheme {
        Column(Modifier.padding(16.dp)) {
            FriendStatusCard(friendState = friendStateNo)
        }
    }
}

@Preview
@Composable
fun FriendStatusCardThinkingPreview() {
    val friendStateThinking = FriendState(
        friendId = "friendThinking",
        name = "Í≥†ÎØºÏ§ë",
        status = GymStatus.THINKING,
        lastUpdated = Clock.System.now().epochSeconds
    )
    GymTheme {
        Column(Modifier.padding(16.dp)) {
            FriendStatusCard(friendState = friendStateThinking)
        }
    }
}

@Preview
@Composable
fun FriendStatusCardNullPreview() {
    GymTheme {
        Column(Modifier.padding(16.dp)) {
            FriendStatusCard(friendState = null)
        }
    }
}

@Composable
fun LoadingFriendCard(
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .shadow(
                elevation = 4.dp,
                shape = RoundedCornerShape(16.dp)
            ),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color.White
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Row(
                modifier = Modifier,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "‚è≥",
                    style = GymTheme.typography.emojiTitleMedium,
                    modifier = Modifier.padding(end = 8.dp)
                )
                Text(
                    text = "Í∏∞Îã§Î†§Î¥ê~ ÏπúÍµ¨ ÏÉÅÌÉú ÌôïÏù∏ Ï§ëÏù¥Îûò!",
                    style = GymTheme.typography.titleMediumR,
                    color = Color.Gray,
                    textAlign = TextAlign.Center
                )
            }

        }
    }
}

@Preview
@Composable
fun LoadingFriendCardPreview() {
    GymTheme {
        LoadingFriendCard()
    }
}
